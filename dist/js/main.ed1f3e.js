(()=>{"use strict";var __webpack_modules__={"./css/index.css":
/*!***********************!*\
  !*** ./css/index.css ***!
  \***********************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack:///./css/index.css?")},"./scripts/block.ts":
/*!**************************!*\
  !*** ./scripts/block.ts ***!
  \**************************/(__unused_webpack_module,exports,__webpack_require__)=>{eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createMatrixMap = exports.Block = exports.BlockType = exports.matrix = void 0;\nconst config_1 = __webpack_require__(/*! ./config */ \"./scripts/config.ts\");\nvar BlockType;\n(function (BlockType) {\n    BlockType[BlockType[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    BlockType[BlockType[\"MINE\"] = 1] = \"MINE\";\n})(BlockType = exports.BlockType || (exports.BlockType = {}));\nconst defaultFillStyle = '#2D3E4A';\nclass Block {\n    constructor(type, mineNum, r, c) {\n        this.type = type;\n        this.mineNum = mineNum;\n        this.r = r;\n        this.c = c;\n        this.exhibit = this.flag = false;\n        this.color = '#171617';\n        this.flagFillStyle = '#95DCED';\n    }\n    show(exhibitNum) {\n        const { exhibit, mineNum, r, c } = this;\n        if (!exhibit) {\n            exhibitNum++;\n            this.exhibit = true;\n            this.flag = false;\n            if (mineNum === 0) {\n                [[-1, 0], [1, 0], [-1, -1], [0, -1], [1, -1], [-1, 1], [0, 1], [1, 1]].forEach(([x, y]) => {\n                    var _a;\n                    const i = r + y, j = c + x;\n                    if (((_a = exports.matrix[i]) === null || _a === void 0 ? void 0 : _a[j]) && !exports.matrix[i][j].exhibit) {\n                        exhibitNum = exports.matrix[i][j].show(exhibitNum);\n                    }\n                });\n            }\n            this.draw();\n        }\n        return exhibitNum;\n    }\n    draw() {\n        const { r, c, mineNum: num, exhibit, flag, fillStyle, color, flagFillStyle } = this;\n        const x = c * config_1.w, y = r * config_1.h;\n        config_1.ctx.beginPath();\n        config_1.ctx.clearRect(x, y, config_1.w, config_1.h);\n        config_1.ctx.strokeRect(x, y, config_1.w, config_1.h);\n        if (exhibit && fillStyle) {\n            config_1.ctx.fillStyle = fillStyle;\n            config_1.ctx.fillRect(x, y, config_1.w, config_1.h);\n        }\n        config_1.ctx.textAlign = 'center';\n        config_1.ctx.textBaseline = 'middle';\n        config_1.ctx.fillStyle = color;\n        if (num) {\n            config_1.ctx.fillText(String(num), x + config_1.w / 2, y + config_1.h / 2);\n        }\n        if (!exhibit) {\n            config_1.ctx.fillStyle = defaultFillStyle;\n            config_1.ctx.fillRect(x, y, config_1.w, config_1.h);\n        }\n        if (flag) {\n            config_1.ctx.fillStyle = flagFillStyle;\n            config_1.ctx.fillRect(x, y, config_1.w, config_1.h);\n        }\n        config_1.ctx.closePath();\n    }\n}\nexports.Block = Block;\n/**\n * 先布雷，再统计\n * @param row\n * @param col\n * @returns mineNum\n */\nfunction createMatrixMap() {\n    exports.matrix = Array.from(new Array(config_1.row), () => []);\n    let num = ~~(config_1.row * config_1.col / 10 + Math.random() * config_1.row * config_1.col / 10);\n    const mineNum = num;\n    while (num > 0) {\n        const r = ~~(Math.random() * config_1.row), c = ~~(Math.random() * config_1.col);\n        if (!exports.matrix[r][c]) {\n            exports.matrix[r][c] = new Block(BlockType.MINE, '*', r, c);\n            num--;\n        }\n    }\n    for (let r = 0; r < config_1.row; ++r) {\n        for (let c = 0; c < config_1.col; ++c) {\n            if (!exports.matrix[r][c]) {\n                const mineNum = [[-1, 0], [1, 0], [-1, -1], [0, -1], [1, -1], [-1, 1], [0, 1], [1, 1]].filter(([dx, dy]) => {\n                    const x = dx + c, y = dy + r;\n                    return x >= 0 && y >= 0 && x < config_1.col && y < config_1.row && exports.matrix[y][x] && exports.matrix[y][x].type === BlockType.MINE;\n                }).length;\n                exports.matrix[r][c] = new Block(BlockType.DEFAULT, mineNum, r, c);\n            }\n        }\n    }\n    return mineNum;\n}\nexports.createMatrixMap = createMatrixMap;\n\n\n//# sourceURL=webpack:///./scripts/block.ts?")},"./scripts/config.ts":
/*!***************************!*\
  !*** ./scripts/config.ts ***!
  \***************************/(__unused_webpack_module,exports)=>{eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ctx = exports.cvs = exports.setRowAndCol = exports.col = exports.row = exports.h = exports.w = void 0;\nexports.w = 20, exports.h = 20;\nexports.row = 10, exports.col = 10;\nconst setRowAndCol = (val) => exports.row = exports.col = val;\nexports.setRowAndCol = setRowAndCol;\nexports.cvs = document.querySelector('canvas'), exports.ctx = exports.cvs.getContext('2d');\n\n\n//# sourceURL=webpack:///./scripts/config.ts?")},"./scripts/index.ts":
/*!**************************!*\
  !*** ./scripts/index.ts ***!
  \**************************/(__unused_webpack_module,exports,__webpack_require__)=>{eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__webpack_require__(/*! ../css/index.css */ \"./css/index.css\");\nconst block_1 = __webpack_require__(/*! ./block */ \"./scripts/block.ts\");\nconst config_1 = __webpack_require__(/*! ./config */ \"./scripts/config.ts\");\nlet mineNum = 0, exhibitNum = 0, time = 0;\nlet timer;\nlet mapW, mapH;\nlet rmEvents;\n/**\n * 主函数\n */\nfunction init() {\n    initState();\n    mineNum = (0, block_1.createMatrixMap)();\n    initEvent();\n    render();\n}\n/**\n * 开始游戏\n */\nfunction gameStart() {\n    timer = setInterval(() => {\n        time++;\n    }, 1000);\n}\n/**\n * 游戏结束\n */\nfunction gameOver() {\n    time = 0;\n    clearInterval(timer);\n    rmEvents();\n}\n/**\n * 初始化state\n */\nfunction initState() {\n    mapW = config_1.cvs.width = config_1.w * config_1.col;\n    mapH = config_1.cvs.height = config_1.h * config_1.row;\n    mineNum = 0;\n    exhibitNum = 0;\n    time = 0;\n}\n/**\n * 统一的事件监听函数\n * @param el 元素\n * @param type 类型\n * @param listener 监听函数\n * @returns\n */\nfunction eventListener(el, type, listener) {\n    el.addEventListener(type, listener, false);\n    return () => el.removeEventListener(type, listener, false);\n}\n/**\n * 初始化点击事件\n */\nfunction initEvent() {\n    const rmClick = eventListener(config_1.cvs, 'click', ev => {\n        const { clientX: x, clientY: y } = ev, { offsetLeft: l, offsetTop: t } = config_1.cvs;\n        const r = ~~((y - t) / config_1.h), c = ~~((x - l) / config_1.w);\n        const block = block_1.matrix[r][c];\n        const { type } = block;\n        if (type == block_1.BlockType.MINE) {\n            bomb(block);\n        }\n        else {\n            if (exhibitNum === 0) {\n                // 游戏开始\n                gameStart();\n            }\n            exhibitNum = block_1.matrix[r][c].show(exhibitNum);\n            setTimeout(() => {\n                if (config_1.row * config_1.col - exhibitNum === mineNum) {\n                    // 赢了\n                    alert(`此次游戏耗时: ${time}s`);\n                    gameOver();\n                }\n            });\n        }\n        // console.log(`总数量: ${row * col},雷数量: ${mineNum},展开了: ${exhibitNum}`);\n    });\n    const rmCtx = eventListener(config_1.cvs, 'contextmenu', ev => {\n        ev.preventDefault();\n        const { clientX: x, clientY: y } = ev, { offsetLeft: l, offsetTop: t } = config_1.cvs;\n        const r = ~~((y - t) / config_1.h), c = ~~((x - l) / config_1.w);\n        const block = block_1.matrix[r][c];\n        if (block.exhibit)\n            return false;\n        block.flag = !block.flag;\n        block.draw();\n    });\n    rmEvents = () => {\n        rmCtx();\n        rmClick();\n    };\n}\n/**\n * 炸片雷\n * @param block\n */\nfunction bomb(block) {\n    block.fillStyle = '#A705ED';\n    block_1.matrix.forEach(blocks => blocks.forEach((block) => {\n        const { type } = block;\n        if (type === block_1.BlockType.MINE) {\n            block.exhibit = true;\n            block.flag = false;\n            block.draw();\n        }\n    }));\n    gameOver();\n}\n/**\n * 渲染函数\n */\nfunction render() {\n    config_1.ctx.clearRect(0, 0, mapW, mapH);\n    for (let r = 0; r < config_1.row; ++r) {\n        for (let c = 0; c < config_1.col; ++c) {\n            block_1.matrix[r][c].draw();\n        }\n    }\n}\n/**\n * 选关事件\n */\neventListener(document.querySelector('.mine-sweeping'), 'click', ({ target }) => {\n    let level = Number(target.dataset.level);\n    if (!level)\n        return;\n    if (time) {\n        if (!confirm('游戏正在进行中,是否弃掉?')) {\n            return;\n        }\n    }\n    level = Math.max(Math.min(level, 3), 1);\n    (0, config_1.setRowAndCol)(level * 10);\n    gameOver();\n    init();\n});\ninit();\n\n\n//# sourceURL=webpack:///./scripts/index.ts?")}},__webpack_module_cache__={};function __webpack_require__(n){var e=__webpack_module_cache__[n];if(void 0!==e)return e.exports;var t=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n](t,t.exports,__webpack_require__),t.exports}__webpack_require__.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./scripts/index.ts")})();